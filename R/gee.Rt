## Generalized Estimating Equations
#- Run an independent GEE model for each taxa with relative abundance
#- Works well with small data - multiple subpoints/subjects across clusters

#https://data.library.virginia.edu/getting-started-with-generalized-estimating-equations/
  
  ### Functions to implement GEEs
  
mk_gee_plot <- function(this_coef, complex, tn) {
  p <- plot(ggeffects::ggemmeans(complex,
                                 terms = c(this_coef, "VisitNumber", "Group"))) + 
    ggplot2::labs(subtitle = "Estimated marginal means",
                  title = str_replace(tn, "_", " ")) +
    ylab("Taxon abundance (log CPM)") +
    ggplot2::theme_classic()
  ggplot2::ggsave(filename =
                    paste("PaperFigs/gee/", tn, "_", this_coef, ".png", sep = ""),
                  p, width = 6, height = 4, units = "in", scale = 0.7)
}

test_models_gee <- function(tn, input_df, to_plot = FALSE) {
  filt_df <- input_df %>% filter(taxon == tn) %>%
    mutate(PatientID = as.factor(PatientID)) %>%
    arrange(PatientID)
  complex <- geeglm(Abundance ~ 1 + Group +
                      Q23.17.Neutraliz..*Group + LAI.Neutraliz..*Group +
                      BaL.Neutraliz..*Group + VisitNumber,
                    id = PatientID, data = filt_df,
                    na.action = na.omit, family = "gaussian",
                    corstr = "ar1")
  sum_comp <- summary(complex)
  all_ci <- broom:::confint.geeglm(complex)
  if (to_plot) {
    sapply(c("Q23.17.Neutraliz..", "LAI.Neutraliz..", "BaL.Neutraliz.."),
           mk_gee_plot, complex, tn)
  }
  res_out <- sum_comp$coefficients %>% select(Estimate, `Pr(>|W|)`) %>%
    mutate("Taxon" = tn) %>%
    bind_cols(all_ci) %>% relocate(Taxon, lwr, Estimate, upr) %>%
    tibble::rownames_to_column(var = "Coefficient")
  return(res_out)
}

save_table <- function(input_df = results_species,
                       fileout = "PaperFigs/species_us_gee.csv") {
  input_df %>%
    dplyr::rename("Coefficient Estimate" = Estimate,
                  "Lower 95% CI" = lwr, "Upper 95% CI" = upr,
                  "Unadj p-value" = `Pr(>|W|)`,
                  "Adj p-value" = `adj_p`) %>%
    write.csv(., fileout)
}

# logcpm_tab <- long_lcpm_genus
run_model <- function(logcpm_tab, to_plot = TRUE) {
  input_df <- logcpm_tab %>% filter(VisitNumber != 2)
  all_tn <- unique(input_df$taxon)
  n <- length(all_tn)
  
  # Plot model coefficients
  # If emmeans doesn't work, may need to step through function
  # and make one plot
  if (to_plot) lapply(all_tn, test_models_gee, input_df = input_df, to_plot = TRUE)
  
  storage <- lapply(all_tn, test_models_gee, input_df = input_df) %>%
    data.table::rbindlist() %>%
    arrange(Coefficient) %>%
    group_by(Coefficient) %>%
    mutate(adj_p = p.adjust(`Pr(>|W|)`, method = "bonferroni")) %>%
    as.data.frame()
  kable(storage, caption = "P-values from GEEs",
        row.names = TRUE)
  return(storage)
}


### Modeling genera -----
```{R}
# Input: create long version of CPM (both moms and infants)
long_lcpm_genus <- create_long(logCPM_genus)

# Get genus-level results
results_genus <- run_model(long_lcpm_genus, to_plot = TRUE)
save_table(results_genus, "PaperFigs/genus_ar1_gee.csv")

# Bonferroni cutoff - genus
0.05/length(unique(results_genus$Taxon))
```


### Modeling species -----
```{R}
# Input: create long version of CPM (both moms and infants)
long_lcpm_species <- SummarizedExperiment::assay(dat, "log_counts_cpm") %>%
  as.data.frame() %>% create_long()

# Top species (more than 1%)
filt <- animalcules::counts_to_relabu(counts_table) |>
  apply(1, function(x) round(mean(x), 3)) %>%
  .[. > 0.01]
## Remove any species that are general "sp." or "Other"
ind <- stringr::str_detect(names(filt), "_sp.|Other")
species_to_test <- names(filt[!ind])

# Get species-level results
results_species <- long_lcpm_species %>%
  filter(taxon %in% species_to_test) %>%
  run_model(to_plot = TRUE)
save_table(results_species, "PaperFigs/species_ar1_gee.csv")

# Bonferroni cutoff - genus
0.05/length(species_to_test)
```
